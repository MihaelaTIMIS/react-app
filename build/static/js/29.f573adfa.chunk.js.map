{"version":3,"sources":["routes/SignUP/index.jsx"],"names":["FormItem","Form","Item","SignUP","props","_this","Object","_Users_jg_Github_jgandco_miuwi_front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_jg_Github_jgandco_miuwi_front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_jg_Github_jgandco_miuwi_front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleChange","event","setState","_Users_jg_Github_jgandco_miuwi_front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","name","value","handleSubmit","e","preventDefault","_this$state","state","password","password_confirm","form","validateFields","err","values","loading","recaptcha","reset","execute","message","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_9__","description","util_IntlMessages__WEBPACK_IMPORTED_MODULE_17__","id","type","email","pseudo","languageUser","settings","locale","languageId","onChange","bind","_Users_jg_Github_jgandco_miuwi_front_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","onResolved","_this2","_this$state2","newUser","userSignUp","then","res","status","data","error","history","push","catch","_this3","getFieldDecorator","style","textAlign","whiteSpace","fontSize","marginBottom","color","className","antd__WEBPACK_IMPORTED_MODULE_8__","onSubmit","rules","required","react_intl__WEBPACK_IMPORTED_MODULE_18__","placeholder","antd__WEBPACK_IMPORTED_MODULE_10__","prefix","antd__WEBPACK_IMPORTED_MODULE_11__","autoComplete","valuePropName","antd__WEBPACK_IMPORTED_MODULE_12__","privacy","dangerouslySetInnerHTML","__html","antd__WEBPACK_IMPORTED_MODULE_13__","antd__WEBPACK_IMPORTED_MODULE_14__","htmlType","react_router_dom__WEBPACK_IMPORTED_MODULE_20__","to","react_google_invisible_recaptcha__WEBPACK_IMPORTED_MODULE_19___default","ref","sitekey","process","Component","WrappedNormalSignUpForm","create","connect"],"mappings":"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","file":"static/js/29.f573adfa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Form, Icon, Input, Alert, Checkbox, Spin } from \"antd\";\nimport { userSignUp } from \"../../appRedux/actions/Auth\";\nimport { connect } from \"react-redux\";\nimport IntlMessages from \"util/IntlMessages\";\nimport { FormattedMessage } from \"react-intl\";\nimport Recaptcha from \"react-google-invisible-recaptcha\";\nimport { Link } from \"react-router-dom\";\nimport { history } from \"./../../appRedux/store\";\n\nconst FormItem = Form.Item;\nconst recaptcha_app_key = process.env.REACT_APP_RECAPTCHA_SITEKEY;\n\nclass SignUP extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      password_confirm: \"\",\n      pseudo: \"\",\n      languageUser: this.props.state.settings.locale.languageId,\n      message: null,\n      loading: false\n    };\n    this.onChange = this.handleChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onResolved = this.onResolved.bind(this);\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { password, password_confirm } = this.state;\n    if (password !== password_confirm) {\n      this.setState({\n        loading: false,\n        message: (\n          <Alert\n            message={\"\"}\n            description={\n              <IntlMessages id=\"miuwi.errorInput.password-confirm-different\" />\n            }\n            type=\"error\"\n          />\n        )\n      });\n      return;\n    }\n\n    this.props.form.validateFields((err, values) => {\n      this.setState({ loading: false });\n      if (!err) {\n        this.recaptcha.execute();\n\n        this.setState({ loading: true });\n      } else {\n        this.recaptcha.reset();\n      }\n    });\n  };\n\n  // captcha resolved\n  onResolved() {\n    const {\n      email,\n      password,\n      password_confirm,\n      pseudo,\n      languageUser\n    } = this.state;\n    const newUser = { email, password, password_confirm, pseudo, languageUser };\n    /*  alert(\"Recaptcha resolved with response: \" + this.recaptcha.getResponse()); */\n    this.props\n      .userSignUp(newUser)\n      .then((res, err) => {\n        if (err) {\n          this.setState({ loading: false });\n          this.recaptcha.reset();\n        }\n        if (res) {\n          if (res.status === 200 || res.status === 201) {\n            if (res.data && res.data.error) {\n              this.setState({\n                loading: false,\n                message: (\n                  <Alert\n                    message={\"\"}\n                    description={\n                      <IntlMessages id=\"miuwi.errorInput.account-already-exists\" />\n                    }\n                    type=\"error\"\n                  />\n                )\n              });\n            } else {\n              this.setState({ loading: false });\n              history.push(\"/confirmation-inscription\");\n            }\n          }\n        } else {\n          this.setState({ loading: false });\n        }\n      })\n      .catch(() => {});\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div /* className=\"gx-login-container\" */>\n        {/* welcome */}\n        <div\n          style={{\n            textAlign: \"center\",\n            whiteSpace: \"pre-line\",\n            fontSize: \"20px\",\n            marginBottom: \"5%\",\n            color: \"#262626\"\n          }}\n        >\n          <IntlMessages id=\"miuwi.login.welcome\" />\n        </div>\n        \n        <div className=\"gx-login-content\">\n          <div className=\"gx-login-header gx-text-center\">\n            <h1 className=\"gx-login-title\">\n              <IntlMessages id=\"miuwi.sidebar.signUp\" />\n            </h1>\n          </div>\n          {this.state.message}\n          <Form\n            onSubmit={this.handleSubmit}\n            className=\"gx-login-form gx-form-row0\"\n          >\n            {/* username */}\n            <FormItem>\n              {getFieldDecorator(\"pseudo\", {\n                rules: [\n                  {\n                    required: true,\n                    message: <IntlMessages id=\"miuwi.errorInput.pseudo\" />\n                  }\n                ]\n              })(\n                <div>\n                  <FormattedMessage id=\"miuwi.signup.username\">\n                    {placeholder => (\n                      <Input\n                        prefix={\n                          <Icon\n                            type=\"user\"\n                            style={{ color: \"rgba(0,0,0,.25)\" }}\n                          />\n                        }\n                        placeholder={placeholder}\n                        name=\"pseudo\"\n                        onChange={this.handleChange}\n                      />\n                    )}\n                  </FormattedMessage>\n                </div>\n              )}\n            </FormItem>\n            \n            {/* email */}\n            <FormItem>\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    required: true,\n                    message: <IntlMessages id=\"miuwi.errorInput.email\" />\n                  }\n                ]\n              })(\n                <div>\n                  <FormattedMessage id=\"miuwi.login.emailError\">\n                    {placeholder => (\n                      <Input\n                        prefix={\n                          <Icon\n                            type=\"mail\"\n                            style={{ color: \"rgba(0,0,0,.25)\" }}\n                          />\n                        }\n                        placeholder={placeholder}\n                        name=\"email\"\n                        type=\"email\"\n                        onChange={this.handleChange}\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  </FormattedMessage>\n                </div>\n              )}\n            </FormItem>\n           \n           {/* password */}\n            <FormItem>\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  {\n                    required: true,\n                    message: <IntlMessages id=\"miuwi.errorInput.password\" />\n                  }\n                ]\n              })(\n                <div>\n                  <FormattedMessage id=\"miuwi.signup.password\">\n                    {placeholder => (\n                      <Input\n                        prefix={\n                          <Icon\n                            type=\"lock\"\n                            style={{ color: \"rgba(0,0,0,.25)\" }}\n                          />\n                        }\n                        type=\"password\"\n                        placeholder={placeholder}\n                        name=\"password\"\n                        onChange={this.handleChange}\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  </FormattedMessage>\n                </div>\n              )}\n            </FormItem>\n            \n            {/* password confirm */}\n            <FormItem>\n              {getFieldDecorator(\"password_confirm\", {\n                rules: [\n                  {\n                    required: true,\n                    message: (\n                      <IntlMessages id=\"miuwi.errorInput.password-confirm\" />\n                    )\n                  }\n                ]\n              })(\n                <div>\n                  <FormattedMessage id=\"miuwi.errorInput.password-confirm\">\n                    {placeholder => (\n                      <Input\n                        prefix={\n                          <Icon\n                            type=\"lock\"\n                            style={{ color: \"rgba(0,0,0,.25)\" }}\n                          />\n                        }\n                        type=\"password\"\n                        placeholder={placeholder}\n                        name=\"password_confirm\"\n                        onChange={this.handleChange}\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  </FormattedMessage>\n                </div>\n              )}\n            </FormItem>\n\n            {/* cgv confirm */}\n            <FormItem style={{ textAlign: \"left\" }}>\n              {getFieldDecorator(\"confirm_cgu_cgv\", {\n                valuePropName: \"checked\",\n                rules: [\n                  {\n                    required: true,\n                    message: <IntlMessages id=\"miuwi.cgucgy.error\" />\n                  }\n                ]\n              })(\n                <div className=\"reset-line-height\">\n                  <Checkbox></Checkbox>\n                  <FormattedMessage id=\"miuwi.legalnotices\">\n                    {privacy => (\n                      <span dangerouslySetInnerHTML={{ __html: privacy }} />\n                    )}\n                  </FormattedMessage>\n                </div>\n              )}\n            </FormItem>\n\n            {/* register button  */}\n            <FormItem className=\"gx-text-center\">\n              {this.state.loading && <Spin />}\n              {!this.state.loading && (\n                <Button type=\"primary\" htmlType=\"submit\">\n                  <IntlMessages id=\"miuwi.sidebar.signUp\" />\n                </Button>\n              )}\n            </FormItem>\n            \n            {/* already account -- login link */}\n            <p style={{ textAlign: \"center\" }}>\n                  <IntlMessages id=\"miuwi.alreadyregistered\" />\n                  <br />\n                  <Link className=\"gx-login-form-forgot\" to=\"/login\">\n                    <IntlMessages id=\"miuwi.signup.iconnect\" />\n                  </Link>\n                </p>\n\n            \n            <Recaptcha\n              ref={ref => (this.recaptcha = ref)}\n              sitekey={recaptcha_app_key}\n              onResolved={this.onResolved}\n            />\n            \n          </Form>\n          {/* social icons */}\n          {/* <div className=\"gx-flex-row\">\n                        <span className=\"gx-mb-2 gx-mr-3\">or Sign up using: </span>\n                        <ul className=\"gx-social-link\">\n                            <li>\n                                <Icon type=\"google\" onClick={() => {\n                                    this.props.showAuthLoader();\n                                    this.props.userGoogleSignIn();\n                                }} />\n                            </li>\n                            <li>\n                                <Icon type=\"facebook\" onClick={() => {\n                                    this.props.showAuthLoader();\n                                    this.props.userFacebookSignIn();\n                                }} />\n                            </li>\n                            <li>\n                                <Icon type=\"github\" onClick={() => {\n                                    this.props.showAuthLoader();\n                                    this.props.userGithubSignIn();\n                                }} />\n                            </li>\n                            <li>\n                                <Icon type=\"twitter\" onClick={() => {\n                                    this.props.showAuthLoader();\n                                    this.props.userTwitterSignIn();\n                                }} />\n                            </li>\n                        </ul>\n                    </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst WrappedNormalSignUpForm = Form.create()(SignUP);\n\nconst mapStateToProps = state => ({\n  state\n});\n\nexport default connect(\n  mapStateToProps,\n  { userSignUp }\n)(WrappedNormalSignUpForm);\n"],"sourceRoot":""}